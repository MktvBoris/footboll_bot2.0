import datetime
from typing import Dict, Union

from loguru import logger

from config_data.config import ATTACKS, DANGEROUS_ATTACKS, SHOTS_ON_TARGET, SHOTS_TOWARDS_THE_GOAL, ID_CHAT, \
    PARTNERS_URL, CORNERS, OUT_LIST, CHECK_RED_CARDS
from datadase.count_table import get_countlist, add_countlist
from datadase.dumplist_table import add_dumplist, check_dumplist
from datadase.sentlist_table import add_sentlist, check_sentlist
from datadase.statlist_table import get_statlist
from loader_telebot import bot
from utilities.other import get_request


@logger.catch
def connect_to_match(id_match):
    """
    –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç json –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
    """
    url = 'https://1xstavka.ru/LiveFeed/GetGameZip?'
    params = {
        "id": id_match, "lng": 'ru',
        'GroupEvents': 'true',
        'grMode': 2,
    }
    response_match = get_request(url, params=params)
    if response_match is not None and response_match.status_code == 200:
        return response_match.json()
    else:
        return False


@logger.catch
def is_there_total(data_match):
    """
    –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Ç–æ—Ç–∞–ª –±–æ–ª—å—à–µ –º–∞—Ç—á–∞
    """
    for data in data_match:
        try:
            if data['G'] == 4:
                find_data = f"<b>–¢–ë</b> {data['E'][0][0]['P']} - {data['E'][0][0]['C']}"
                if len(data['E'][0]) > 1:
                    find_data += f", {data['E'][0][1]['P']} - {data['E'][0][1]['C']}"
                return find_data
        except (KeyError, TypeError):
            logger.info("–ù–µ—Ç –∫–ª—é—á–∞ –≤ –∫–æ—Ç–∏—Ä–æ–≤–∫–µ")
            return False


@logger.catch
def add_stats(data_match) -> Union[Dict, bool]:
    """
    –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–∞
    """
    stats = {}
    for index in data_match:
        try:
            if index['ID'] == 45:  # –ê—Ç–∞–∫–∏
                stats['–ê—Ç–∞–∫–∏'] = [int(index['S1']), int(index['S2'])]
            elif index['ID'] == 58:  # –û–ø–∞—Å–Ω—ã–µ –∞—Ç–∞–∫–∏
                stats['–û–ø–∞—Å–Ω—ã–µ –∞—Ç–∞–∫–∏'] = [int(index['S1']), int(index['S2'])]
            elif index['ID'] == 29:  # –í–ª–∞–¥–µ–Ω–∏–µ –º—è—á–æ–º
                stats['–í–ª–∞–¥–µ–Ω–∏–µ –º—è—á–æ–º'] = [int(index['S1']), int(index['S2'])]
            elif index['ID'] == 59:  # –£–¥–∞—Ä—ã –≤ —Å—Ç–≤–æ—Ä
                stats['–£–¥–∞—Ä—ã –≤ —Å—Ç–≤–æ—Ä'] = [int(index['S1']), int(index['S2'])]
            elif index['ID'] == 60:  # –£–¥–∞—Ä—ã –≤ —Å—Ç–æ—Ä–æ–Ω—É –≤–æ—Ä–æ—Ç
                stats['–£–¥–∞—Ä—ã –≤ —Å—Ç–æ—Ä–æ–Ω—É –≤–æ—Ä–æ—Ç'] = [int(index['S1']), int(index['S2'])]
            elif index['ID'] == 70:  # –£–≥–ª–æ–≤—ã–µ
                stats['–£–≥–ª–æ–≤—ã–µ'] = [int(index['S1']), int(index['S2'])]
            elif index['ID'] == 26:  # –ñ–µ–ª—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                stats['–ñ–µ–ª—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏'] = [int(index['S1']), int(index['S2'])]
            elif index['ID'] == 71:  # –ö—Ä–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                stats['–ö—Ä–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏'] = [int(index['S1']), int(index['S2'])]
        except (KeyError, TypeError):
            logger.info("–ù–µ—Ç –∫–ª—é—á–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ")
            return False
    return stats


@logger.catch
def filter_events(stats) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–±–∏—Ä–∞–µ—Ç –º–∞—á—Ç –ø–æ –Ω–∞–ª–∏—á–∏—é –∫–∞—Ä—Ç–æ—á–µ–∫
    """
    if stats.get('–ö—Ä–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏'):
        return sum(stats['–ö—Ä–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏']) > 0


@logger.catch
def filter_stats(stats) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–±–∏—Ä–∞–µ—Ç –º–∞—Ç—á –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –Ω—É–∂–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    flag = True
    for key, value in stats.items():
        if key == '–ê—Ç–∞–∫–∏':
            if value[0] + value[1] < ATTACKS:
                flag = False
        elif key == '–û–ø–∞—Å–Ω—ã–µ –∞—Ç–∞–∫–∏':
            if value[0] + value[1] < DANGEROUS_ATTACKS:
                flag = False
        elif key == '–£–¥–∞—Ä—ã –≤ —Å—Ç–≤–æ—Ä':
            if value[0] + value[1] < SHOTS_ON_TARGET:
                flag = False
        elif key == '–£–¥–∞—Ä—ã –≤ —Å—Ç–æ—Ä–æ–Ω—É –≤–æ—Ä–æ—Ç':
            if value[0] + value[1] < SHOTS_TOWARDS_THE_GOAL:
                flag = False
        elif key == '–£–≥–ª–æ–≤—ã–µ':
            if value[0] + value[1] < CORNERS:
                flag = False

    return flag


@logger.catch
def get_statistic(liga) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —á–µ–º–ø–∏–æ–Ω–∞—Ç—É
    """
    liga_rate = get_statlist(liga)
    if liga_rate:
        star_rating = round(liga_rate["win_rate"])
        stat_str = f'\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏–≥–∏:</b> {star_rating}%\n' \
                   f'<b>–í—Å–µ–≥–æ:</b> {liga_rate["all"]} –í—ã–∏–≥—Ä–∞–Ω–æ: {liga_rate["win"]}'
    else:
        stat_str = ''
    return stat_str


@logger.catch
def get_tablo(stats) -> Union[str, None]:
    """
    –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    str_tablo = ''
    try:
        str_tablo += f"<b>–ê—Ç–∞–∫–∏</b> {stats['–ê—Ç–∞–∫–∏'][0]} - {stats['–ê—Ç–∞–∫–∏'][1]}"
        str_tablo += f"\n<b>–û–ø–∞—Å–Ω—ã–µ –∞—Ç–∞–∫–∏</b> {stats['–û–ø–∞—Å–Ω—ã–µ –∞—Ç–∞–∫–∏'][0]} - {stats['–û–ø–∞—Å–Ω—ã–µ –∞—Ç–∞–∫–∏'][1]}"
        str_tablo += f"\n<b>–£–¥–∞—Ä—ã –≤ —Å—Ç–≤–æ—Ä</b> {stats['–£–¥–∞—Ä—ã –≤ —Å—Ç–≤–æ—Ä'][0]} - {stats['–£–¥–∞—Ä—ã –≤ —Å—Ç–≤–æ—Ä'][1]}"
        str_tablo += f"\n<b>–£–¥–∞—Ä—ã –≤ —Å—Ç–æ—Ä–æ–Ω—É –≤–æ—Ä–æ—Ç</b> {stats['–£–¥–∞—Ä—ã –≤ —Å—Ç–æ—Ä–æ–Ω—É –≤–æ—Ä–æ—Ç'][0]} - {stats['–£–¥–∞—Ä—ã –≤ —Å—Ç–æ—Ä–æ–Ω—É –≤–æ—Ä–æ—Ç'][1]}"
        str_tablo += f"\n<b>–í–ª–∞–¥–µ–Ω–∏–µ –º—è—á–æ–º %</b> {stats['–í–ª–∞–¥–µ–Ω–∏–µ –º—è—á–æ–º'][0]} - {stats['–í–ª–∞–¥–µ–Ω–∏–µ –º—è—á–æ–º'][1]}"
        str_tablo += f"\n<b>–£–≥–ª–æ–≤—ã–µ</b> {stats['–£–≥–ª–æ–≤—ã–µ'][0]} - {stats['–£–≥–ª–æ–≤—ã–µ'][1]}"
        if stats['–ñ–µ–ª—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏'][0] + stats['–ñ–µ–ª—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏'][1] > 0:
            str_tablo += f"\n<b>–ñ–µ–ª—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏</b> {stats['–ñ–µ–ª—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏'][0]} - {stats['–ñ–µ–ª—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏'][1]}"
        if stats['–ö—Ä–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏'][0] + stats['–ö—Ä–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏'][1] > 0:
            str_tablo += f"\n<b>–ö—Ä–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏</b> {stats['–ö—Ä–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏'][0]} - {stats['–ö—Ä–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏'][1]}"
    except (KeyError, TypeError):
        logger.info("–ù–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∫–æ–º–∞–Ω–¥")
        return None
    return str_tablo


@logger.catch
def check_game(game: Dict) -> Union[bool, None]:
    """
    –§—É–Ω–∫—Ü–∏—è –º–∞—Ç—á –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é
    """
    if check_sentlist(game['url']) or check_dumplist(game['url']):
        return False

    data_game = connect_to_match(game['id_game'])
    if not data_game:
        logger.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞")
        return False
    else:
        try:
            liga_names = data_game['Value']['L']
        except (KeyError, TypeError):
            logger.info("–ù–µ—Ç –∫–ª—é—á–∞ –∏–º–µ–Ω–∏ –ª–∏–≥–∏")
            return False
        if set(liga_names.split()) & OUT_LIST:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ª–∏–≥–∞ –≤ –º—É—Å–æ—Ä–Ω—ã—Ö –ª–∏–≥–∞—Ö
            return False

    try:
        result_total = is_there_total(data_game['Value']['GE'])  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å —Ç–æ—Ç–∞–ª –≤ –º–∞—Ç—á–µ
        if not result_total:
            return False
    except (KeyError, TypeError):
        logger.info("–ù–µ—Ç —Ç–æ—Ç–∞–ª–∞ –≤ –º–∞—Ç—á–µ")
        return False

    try:
        match_stats = add_stats(data_game['Value']['SC']['ST'][0]['Value'])  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –º–∞—Ç—á–µ
        if not match_stats:
            return False
    except (KeyError, TypeError):
        logger.info("–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –º–∞—Ç—á–µ")
        return False

    if filter_events(match_stats) and CHECK_RED_CARDS:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –µ—Å–ª–∏ True –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        add_dumplist(game["url"])
        return False

    if not filter_stats(match_stats):
        return False

    try:
        match_id = data_game['Value']['SGI']  # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Å—Å—ã–ª–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if not match_stats:
            return False
        stat_url = 'https://eventsstat.com/statisticpopup/game/1/' + match_id + '/main?'
    except (KeyError, TypeError):
        logger.info("–ù–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return False

    stat_str = get_statistic(liga_names)

    count_message = get_countlist('count')

    tablo_str = get_tablo(match_stats)

    if tablo_str is None:
        return False

    text_message = f'<i>#{count_message} –ë—É–¥–µ—Ç –≥–æ–ª!\n' \
                   f'üèÜ <b>{liga_names}</b>\n' \
                   f'<code>{game["teams"]}</code>\n' \
                   f'‚öΩ {game["score"]} ' \
                   f'‚åö {game["time"]}\n' \
                   f'{tablo_str}' \
                   f'\n{result_total}{stat_str}' \
                   f'\n<a href="{PARTNERS_URL}">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>/' \
                   f'<a href="{game["url"]}">–°—Ç–∞–≤–∏—Ç—å –Ω–∞ –º–∞—Ç—á</a></i>'

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç —Å–∏–≥–Ω–∞–ª
    current_id_message = (
        bot.send_message(chat_id=ID_CHAT, text=text_message, parse_mode='html')).id

    second = int(datetime.datetime.now().timestamp())

    add_sentlist(
        id_game=game["id_game"], url=game["url"], id_message=current_id_message,
        text_message=text_message, score_sum=game['score_sum'], liga_names=liga_names, second=second,
        team_two=game["team_two"], team_one=game["team_one"], stat_url=stat_url
    )

    add_countlist('count')
